'OLS655 Final Project
'Eunhye Chae 010327146

Imports System.Data.OracleClient

Public Class BookingDAO
    Private Property UserName() As String
    Private Property Password() As String

    'constructor
    Public Sub New(ByVal UserId As String, ByVal Password As String)
        Me.UserName = UserId
        Me.Password = Password
    End Sub

    Public Function FindLimousines(ByVal PickupDate As Date, ByVal Duration As Integer, ByVal LimousineStyle As String) As List(Of Limousine)
        Dim conn As New OracleConnection(String.Format("Data Source=Neptune; User Id={0}; Password={1}", UserName, Password))
        Dim sql As String
        Dim DropoffDate As Date = PickupDate.AddMinutes(Duration)


        If String.Equals(LimousineStyle, "Any") Then 'If style "Any" is selected, list any type of vehicle available
            sql = "SELECT MIN(vin) AS vin, model, style FROM limousine WHERE vin NOT IN (SELECT vin FROM servicebooking WHERE TO_DATE(:pickupDateTime, 'DD-MON-RR') - 1/48 < dropoff_date + 1/48 AND TO_DATE(:dropoffDateTime, 'DD-MON-RR') + 1/48 > pickup_date - 1/48) GROUP BY model, style ORDER BY model"
        Else 'Otherwise, set sql string with selected style
            sql = "SELECT MIN(vin) AS vin, model, style FROM limousine WHERE vin NOT IN (SELECT vin FROM servicebooking WHERE TO_DATE(:pickupDateTime, 'DD-MON-RR') - 1/48 < dropoff_date + 1/48 AND drop TO_DATE(:dropoffDateTime, 'DD-MON-RR') + 1/48 > pickup_date - 1/48) AND style = :selectStyle GROUP BY model, style ORDER BY model"
        End If

        Dim cmd As New OracleCommand(sql, conn)

        cmd.Parameters.AddWithValue(":pickupDateTime", PickupDate)
        cmd.Parameters.AddWithValue(":dropoffDateTime", DropoffDate)

        'If selected style is not "Any"
        If Not String.Equals(LimousineStyle, "Any") Then
            cmd.Parameters.AddWithValue(":selectStyle", LimousineStyle)
        End If

        'Poplutae available vehicles gridview
        Dim da As New OracleDataAdapter(cmd)
        Dim dt As New DataTable
        Dim limousine As New List(Of Limousine)

        For Each dr As DataRow In dt.Rows
            Dim gvVin As String = Convert.ToString(dr.Item("vin"))
            Dim gvModel As String = Convert.ToString(dr.Item("model"))
            Dim gvStyle As String = Convert.ToString(dr.Item("style"))
            limousine.Add(New Limousine(gvVin, gvModel, gvStyle))
        Next
        Return limousine
    End Function

    Public Function BookLimousine(ByVal ClientPhoneNumber As String, ByVal Vin As String, ByVal PickupDate As Date, ByVal DropoffDate As Date) As Integer
        Dim conn As New OracleConnection(String.Format("Data Source=Neptune; User Id={0}; Password={1}", UserName, Password))
        Dim cmd As New OracleCommand("BOOK_LIMOUSINE", conn)
        Dim bookingID As New Integer

        cmd.CommandType = CommandType.StoredProcedure
        cmd.Parameters.AddWithValue("pClient_phone_number", ClientPhoneNumber)
        cmd.Parameters.AddWithValue("pVin_param", Vin)
        cmd.Parameters.AddWithValue("pPickup_param", PickupDate)
        cmd.Parameters.AddWithValue("pDropoff_param", DropoffDate)
        cmd.Parameters.Add("pBooking_id", OracleType.Number).Direction = ParameterDirection.Output

        conn.Open()
        Try
            cmd.ExecuteNonQuery()
            bookingID = Convert.ToInt32(cmd.Parameters.Item("pBooking_id").Value)
            Return bookingID
        Catch ex As Exception
            ' do nothing
        Finally
            conn.Close()
        End Try

        Return bookingID
    End Function

    Public Sub CancelServiceBooking(ByVal BookingId As Integer)
        Dim conn As New OracleConnection(String.Format("Data Source=Neptune; User Id={0}; Password={1}", UserName, Password))
        Dim cmd As New OracleCommand()
        Dim trans As OracleTransaction

        cmd.Connection = conn ' attach the OracleCommand object to the OracleConnection object
        cmd.CommandType = CommandType.Text ' CommandType.Text means a text-based SQL statement (e.g., SELECT, INSERT, UPDATE, DELETE, etc.)

        cmd.Parameters.AddWithValue(":bookingid", BookingId)

        conn.Open()
        trans = conn.BeginTransaction()
        cmd.Transaction = trans
        Try
            cmd.CommandText = "DELETE FROM service_booking WHERE booking_id = :bookingid"
            cmd.ExecuteNonQuery()
            trans.Commit()
        Catch ex As Exception
            trans.Rollback()
            Throw ex
        Finally
            conn.Close()
        End Try
    End Sub

End Class
